@namespace Microsoft.AspNetCore.Components.QuickGrid
@implements IDisposable

<div class="paginator">
    @if (Value.TotalItemCount.HasValue)
    {
        <div class="summary">
            @if (SummaryTemplate is not null)
            {
                @SummaryTemplate
            }
            else
            {
                <text><strong>@Value.TotalItemCount</strong> items</text>
            }
        </div>
        <nav role="navigation">
            <button class="go-first" @onclick="GoFirstAsync" disabled="@(!CanGoBack)" title="Go to first page" aria-title="Go to first page"></button>
            <button class="go-previous" @onclick="GoPreviousAsync" disabled="@(!CanGoBack)" title="Go to previous page" aria-title="Go to previous page"></button>
            <div>
                Page <strong>@(Value.CurrentPageIndex + 1)</strong>
                of <strong>@(Value.LastPageIndex + 1)</strong>
            </div>
            <button class="go-next" @onclick="GoNextAsync" disabled="@(!CanGoForwards)" title="Go to next page" aria-title="Go to next page"></button>
            <button class="go-last" @onclick="GoLastAsync" disabled="@(!CanGoForwards)" title="Go to last page" aria-title="Go to last page"></button>
        </nav>
    }
</div>

@code {
    private readonly EventCallbackSubscriber<PaginationState> _totalItemCountChanged;

    [Parameter, EditorRequired] public PaginationState Value { get; set; } = default!;
    [Parameter] public RenderFragment? SummaryTemplate { get; set; }

    public Paginator()
    {
        // The "total item count" handler doesn't need to do anything except cause this component to re-render
        _totalItemCountChanged = new (new EventCallback<PaginationState>(this, null));
    }

    Task GoFirstAsync() => GoToPageAsync(0);
    Task GoPreviousAsync() => GoToPageAsync(Value.CurrentPageIndex - 1);
    Task GoNextAsync() => GoToPageAsync(Value.CurrentPageIndex + 1);
    Task GoLastAsync() => GoToPageAsync(Value.LastPageIndex.GetValueOrDefault(0));

    bool CanGoBack => Value.CurrentPageIndex > 0;
    bool CanGoForwards => Value.CurrentPageIndex < Value.LastPageIndex;

    Task GoToPageAsync(int pageIndex)
        => Value.SetCurrentPageIndexAsync(pageIndex);

    protected override void OnParametersSet()
        => _totalItemCountChanged.SubscribeOrMove(Value.TotalItemCountChanged);

    public void Dispose()
        => _totalItemCountChanged.Dispose();
}
