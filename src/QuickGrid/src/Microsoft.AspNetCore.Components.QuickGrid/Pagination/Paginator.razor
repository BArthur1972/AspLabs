@namespace Microsoft.AspNetCore.Components.QuickGrid

<div class="paginator">
    <div class="summary">
        @if (SummaryTemplate is not null)
        {
            @SummaryTemplate
        }
        else
        {
            <text><strong>@Value.TotalItemCount</strong> items</text>
        }
    </div>
    <nav role="navigation">
        <button class="go-first" @onclick="GoFirst" disabled="@(!CanGoBack)" title="Go to first page" aria-title="Go to first page"></button>
        <button class="go-previous" @onclick="GoPrevious" disabled="@(!CanGoBack)" title="Go to previous page" aria-title="Go to previous page"></button>
        <div>
            Page <strong>@(Value.CurrentPageIndex + 1)</strong>
            of <strong>@(Value.LastPageIndex + 1)</strong>
        </div>
        <button class="go-next" @onclick="GoNext" disabled="@(!CanGoForwards)" title="Go to next page" aria-title="Go to next page"></button>
        <button class="go-last" @onclick="GoLast" disabled="@(!CanGoForwards)" title="Go to last page" aria-title="Go to last page"></button>
    </nav>
</div>

@code {
    [Parameter] public PaginationState Value { get; set; } = new();
    [Parameter] public EventCallback<PaginationState>? ValueChanged { get; set; } = default!;
    [Parameter] public RenderFragment? SummaryTemplate { get; set; }

    Task GoFirst() => GoToPage(0);
    Task GoPrevious() => GoToPage(Value.CurrentPageIndex - 1);
    Task GoNext() => GoToPage(Value.CurrentPageIndex + 1);
    Task GoLast() => GoToPage(Value.LastPageIndex);

    bool CanGoBack => Value.CurrentPageIndex > 0;
    bool CanGoForwards => Value.CurrentPageIndex < Value.LastPageIndex;

    Task GoToPage(int pageIndex)
    {
        Value.CurrentPageIndex = pageIndex;
        return ValueChanged?.InvokeAsync(Value) ?? Task.CompletedTask;
    }
}
